# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-02-25 10:17
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the modeled component', max_length=50)),
                ('short_desc', models.CharField(max_length=500)),
                ('text', models.TextField(help_text='full text of the component with risks and benefits applicable')),
                ('suggested_age_lower', models.SmallIntegerField(help_text='identifies the subscribers lowest eligible age limit')),
                ('suggested_age_upper', models.SmallIntegerField(help_text='identifies the subscribers upper eligible age limit')),
                ('available_to_gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('B', 'Both')], help_text='the eligible genders who can subscribe to this component', max_length=1)),
                ('status', models.CharField(choices=[('UC', 'UnderConstruction'), ('UR', 'UnderReview'), ('SU', 'Submitted'), ('PU', 'Published')], help_text='different statuses available for program', max_length=2)),
                ('creation_timestamp', models.DateTimeField(auto_now_add=True, help_text='date and time customer first subscribed to this component')),
                ('publish_timestamp', models.DateTimeField(help_text='date and time customer first subscribed to this component', null=True)),
                ('start_date', models.DateField(help_text='date on which the event is happening, for recurring, start date', null=True)),
                ('can_be_recurring', models.BooleanField(default=False, help_text='when true identifies the challenge as can be used as recurring event')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChallengeReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.SmallIntegerField(choices=[(1, '*'), (2, '**'), (3, '***'), (4, '****'), (5, '*****')], help_text='identifies the users rating')),
                ('comments', models.TextField(blank=True, help_text='users review comments', null=True)),
                ('challenge_id', models.ForeignKey(help_text='uniquely identifies the challenge', on_delete=django.db.models.deletion.CASCADE, to='challenges.Challenge')),
                ('user_id', models.ForeignKey(help_text='identifies the user who gave the rating and worote a review', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChallengeService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nick_name', models.CharField(help_text='customer given name for the component, like "my diabetes type2 program"', max_length=50, null=True)),
                ('status', models.CharField(choices=[('E', 'Effective'), ('D', 'Dormant'), ('C', 'Completed')], help_text='status of the program status', max_length=1)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('creation_timestamp', models.DateTimeField(auto_now_add=True, help_text='date and time customer first subscribed to this component')),
                ('last_update_timestamp', models.DateTimeField(auto_now=True, help_text='date and time customer last updated this component')),
                ('start_date', models.DateField(help_text='date on which the event is happening, for recurring, start date')),
                ('end_Date', models.DateField(help_text='optional end date, used for recurring events only', null=True)),
                ('is_recurring', models.NullBooleanField(help_text='when true, identifies it as recurring event')),
                ('recurring_count', models.SmallIntegerField(help_text='how many times the event occurs', null=True)),
                ('recurring_frequency', models.CharField(choices=[('H', 'Hourly'), ('D', 'Daily'), ('W', 'Weekly'), ('M', 'Monthly'), ('Y', 'Yearly')], help_text='identifies the frequency with which the event occurs', max_length=1, null=True)),
                ('challenge_id', models.ForeignKey(help_text='identifies the challenge template to which customer subscribed to', on_delete=django.db.models.deletion.CASCADE, to='challenges.Challenge')),
                ('user_id', models.ForeignKey(help_text='identifies the customer signed up for the program', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
