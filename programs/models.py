from __future__ import unicode_literals

# Create your models here.

from django.db import models

from library.models import HealthComponent, HealthService, Review, gender_choices

class HealthConditionManager(models.Manager):
    def create(self,**validated_data):
        HealthCondition = self.model(
            health_condition = validated_data.get('health_condition',None),
            body_part = validated_data.get('body_part',None),
            gender = validated_data.get('gender',None)
        )

        HealthCondition.save(using=self._db)
        return HealthCondition


class HealthCondition(models.Model):

    health_condition_choices = (
        ('DIABETES-TYPE2', 'Diabetes Type2'),
        ('ARTHRITIS', 'Arthritis'),
        ('OSTEOPOROSIS', 'Osteoporosis'),
        ('ADHD', 'ADHD'),
        ('SLEEP-APNIA', 'Sleep Apnea'),
    )

    body_part_choices = (
        ('GENERAL', 'General'),
        ('HEAD', 'Head'),
        ('EYE', 'Eye'),
        ('NOSE', 'Nose'),
        ('CHEST', 'Chest'),
        ('TEETH', 'Teeth'),
        ('MOUTH', 'Mouth'),
        ('THROAT', 'Throat'),
        ('EAR', 'Ear'),
        ('SPINE', 'Spine'),
        ('NECK', 'Neck'),
        ('STOMACH', 'Stomach'),
        ('KNEE', 'Knee'),
        ('FEET','Feet'),

    )

    objects = HealthConditionManager()

    health_condition = models.CharField(max_length=50, choices=health_condition_choices,
                                        help_text='health condition ex: Diabetes',)
    body_part = models.CharField(max_length=30, choices=body_part_choices, default='General',
                                 help_text=' Body part, ex: eye',)
    gender = models.CharField(max_length=1, default='B', choices=gender_choices, help_text='gender ex: Female',)

    class Meta:
        unique_together = (('health_condition', 'body_part', 'gender'),)


class ProgramManager(models.Manager):
    def create(self,**validated_data):
        Program = self.model(
            name = validated_data.get('name', None),
            short_desc = validated_data.get('short_desc', None),
            text = validated_data.get('text', None),
            status = validated_data.get('status', None),
            suggested_age_lower = validated_data.get('suggested_age_lower', None),
            suggested_age_upper = validated_data.get('suggested_age_upper', None),
            available_to_gender = validated_data.get('available_to_gender', None),
            health_condition_id = validated_data.get('health_condition_id', None),
            picture = validated_data.get('picture', None),

        )
        Program.save(using=self._db)
        return Program


class Program(HealthComponent):
    health_condition_id = models.ForeignKey('HealthCondition', unique = True,
                                            help_text='each program is associated with a health condition' )
    objects = ProgramManager()


class ProgramComponentManager(models.Manager):
    def create(self,**validated_data):
        ProgramComponent = self.model(
            program_id = validated_data.get('program_id',None),
            component_type = validated_data.get('component_type',None),
            component_id = validated_data.get('component_id',None)
        )
        ProgramComponent.save(using=self._db)
        return ProgramComponent


class ProgramComponent(models.Model):
    component_type_choices =(
        ('HA','Habit'),
        ('HO','Hobby'),
        ('RO','Routine'),
        ('CH','Challenge'),
    )
    objects = ProgramComponentManager()
    program_id = models.ForeignKey('Program', help_text='Identifies the program, this row component is associated with')
    component_type = models.CharField(max_length=2, choices=component_type_choices,
                                      help_text='Identifies the type of the component')
    component_id = models.IntegerField(help_text='identifies the unique component like a Habit or Hobby')

    class Meta:
        unique_together = (('program_id', 'component_type', 'component_id'),)


class ProgramServiceManager(models.Manager):
    def create(self,**validated_data):
        ProgramService = self.model(
            program_id = validated_data.get('program_id', None),
            user_id = validated_data.get('user_id', None),
            nick_name = validated_data.get('nick_name', None),
            status = validated_data.get('status', None),
            end_date = validated_data.get('end_date', None),
        )
        ProgramService.save(using=self._db)
        return ProgramService


class ProgramService(HealthService):
    # default id field generated by django serves as uniquely identifying field for program service
    objects = ProgramServiceManager()
    program_id = models.ForeignKey('Program', on_delete=models.CASCADE,
                                 help_text='identifies the program template to which customer subscribed to')
    class Meta:
        unique_together = (('program_id', 'user_id',),)

class ProgramReviewManager(models.Manager):

    def create(self, **validated_data):
        """
        Creates and saves program review.
        """

        ProgramReview = self.model(
            program_id = validated_data.get('program_id', None),
            user_id = validated_data.get('user_id', None),
            rating = validated_data.get('rating', None),
            comments = validated_data.get('comments', None),
        )

        ProgramReview.save(using=self._db)
        return ProgramReview


class ProgramReview(Review):
    # default id field generated by django serves as uniquely identifying field for program review
    objects = ProgramReviewManager()
    program_id = models.ForeignKey('Program', on_delete=models.CASCADE,
                                 help_text='uniquely identifies the program')

    class Meta:
        unique_together = (('program_id', 'user_id',),)

